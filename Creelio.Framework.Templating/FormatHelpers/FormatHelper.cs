using System;
using System.Collections.Generic;
using Creelio.Framework.Core.Extensions.MaybeMonad;
using Creelio.Framework.Templating.Extensions.TextTransformationExtensions;
using Microsoft.VisualStudio.TextTemplating;

namespace Creelio.Framework.Templating.FormatHelpers
{
    public abstract class FormatHelper
    {
        #region Fields

        protected TextTransformation _tt = null;

        #endregion

        #region Constructors

        protected FormatHelper(TextTransformation textTransformation)
        {
            textTransformation.ThrowIfNull(() => new ArgumentNullException("textTransformation"));
            _tt = textTransformation;
        }

        #endregion

        #region Methods

        public void WriteDisclaimer(ITextTemplatingEngineHost host)
        {
            var lines = new List<string>();

            lines.Add("Auto-generated by T4 template");
            lines.Add(string.Empty);
            
            if (host != null)
            {
                lines.Add(string.Format("Template Path : {0}", host.TemplateFile));
            }

            lines.Add(string.Format("Generated On  : {0}", DateTime.Now));
            lines.Add(string.Empty);
            lines.Add("WARNING: Do not modify this file directly. Your changes will be overwritten when the file is regenerated.");

            var formattedLines = FormatDisclaimerLines(lines);

            _tt.WriteLines(formattedLines);
        }

        protected abstract IEnumerable<string> FormatDisclaimerLines(IEnumerable<string> disclaimerLines);

        protected void ProcessIdentifier(ref string id, string idType)
        {
            if (string.IsNullOrEmpty(id))
            {
                throw new ArgumentNullException(
                    string.Format(
                        "{0} cannot be null or empty.",
                        idType
                    )
                );
            }

            id = id.Trim();

            if (string.IsNullOrEmpty(id))
            {
                throw new ArgumentException(
                    string.Format(
                        "{0} must be a valid identifier.",
                        idType
                    )
                );
            }
        }

        protected void ProcessNullableIdentifier(ref string id, string idType)
        {
            if (string.IsNullOrEmpty(id) || id.Trim().Length == 0)
            {
                id = null;
            }
            else
            {
                ProcessIdentifier(ref id, idType);
            }
        }

        #endregion
    }
}
